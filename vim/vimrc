" .vimrc
set nocompatible                "Turn off compability mode with Vi, we don't need that anymore

execute pathogen#infect()
execute pathogen#helptags()
syntax on
filetype plugin indent on

set noerrorbells                " No beeps
set number                      " Show line numbers
set backspace=indent,eol,start  " Makes backspace key more powerful.
set showcmd                     " Show me what I'm typing
set showmode                    " Show current mode.

set cmdheight=1                 " The commandbar height
set noswapfile                  " Don't use swapfile
set nobackup            	" Dont create annoying backup files
set autoread                    " Read automatically files without asking me anything
set splitright                  " Split vertical windows right to the current windows
set splitbelow                  " Split horizontal windows below to the current windows
set encoding=utf-8              " Set default encoding to UTF-8
set autowrite                   " Automatically save before :next, :make etc.
set laststatus=2

set fileformats=unix,dos,mac    " Prefer unix over windows over os9 formats

set showmatch                   " Do not show matching brackets by flickering
set incsearch                   " Shows the match while typing
set hlsearch                    " Highlight found searches
set ignorecase                  " Search incase sensitive...
set smartcase                   " ... but now when search pattern contains upper case characters


" ----------------------------------------------"
" MacVim modifications (color, shortcuts,etc..  "
" ----------------------------------------------"

set background=dark
colorscheme molokai
let g:molokai_original = 1

" No toolbars, menu or scrollbars in the GUI
if has('gui_macvim')
   set guifont=Source\ Code\ Pro\ for\ Powerline:h13
   set clipboard+=unnamed
   set vb t_vb=
   set guioptions-=m  "no menu
   set guioptions-=T  "no toolbar
   set guioptions-=l
   set guioptions-=L
   set guioptions-=r  "no scrollbar
   set guioptions-=R
end

if has("gui_macvim")
  " Open ctrlp with cmd+p
  macmenu File.Print key=<nop>
  let g:ctrlp_map = '<D-p>'

  " Move  with cmd+alt
  nmap <D-M-RIGHT> gt
  nmap <D-M-LEFT> gT

  " Comment lines with cmd+/
  vmap <D-/> ,c<space>gv
  map <D-/> ,c<space>

  " Indent lines with cmd+[ and cmd+]
  map <D-]> >>
  map <D-[> <<
  
  "switch between tabs with cmd+1, cmd+2,..."
  map <D-1> :tabfirst<Cr>
  map <D-2> :tabfirst<Cr>gt
  map <D-3> :tabfirst<Cr>3gt
  map <D-4> :tabfirst<Cr>4gt
  map <D-5> :tabfirst<Cr>5gt
  map <D-6> :tabfirst<Cr>6gt
  map <D-7> :tabfirst<Cr>7gt
  map <D-8> :tabfirst<Cr>8gt
  map <D-9> :tabfirst<Cr>9gt
endif

" ------------------------------------------"
" Mappings                                  "
" ----------------------------------------- "
"
" This comes first, because we have mappings that depend on leader
" With a map leader it's possible to do extra key combinations
" i.e: <leader>w saves the current file
let mapleader = ","
let g:mapleader = ","

" Remove search hilight
nnoremap <leader><space> :nohlsearch<CR>

" Better split switching
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Fast saving
nmap <leader>w :w!<cr>
nmap <leader>q :q!<cr>

" Move up and down on splitted lines (on small width screens)
map <Up> gk
map <Down> gj
map k gk
map j gj

" Search mappings: These will make it so that going to the next one in a
" search will center on the line it's found in.
map N Nzz
map n nzz

" Act like D and C
nnoremap Y y$

" ----------------------------------------- "
" Plugin configs 			    "
" ----------------------------------------- "

let g:ctrlp_cmd = 'CtrlPMRU'		" Open it in most recenlty used mode (the most important option everyone want!)
let g:ctrlp_working_path_mode = 'ra'	" search for nearest ancestor like .git, .hg, and the directory of the current file
let g:ctrlp_match_window_bottom = 0	" show the match window at the top of the screen
let g:ctrlp_max_height = 10		" maxiumum height of match window
let g:ctrlp_switch_buffer = 'Et'	" jump to a file if its open already
let g:ctrlp_use_caching = 1		" enable caching
let g:ctrlp_show_hidden = 1		" show me dotfiles
let g:ctrlp_mruf_max = 250		" number of recently opened files

let g:Powerline_symbols = 'fancy'

let g:ycm_autoclose_preview_window_after_completion = 1
